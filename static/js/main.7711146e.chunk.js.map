{"version":3,"sources":["App.js","index.js"],"names":["App","props","state","balanceByAccount","handleChange","bind","event","this","getBalanceByAccount","target","value","console","log","setState","text","accountBalances","split","map","line","account","getAccount","balanceInPence","getBalanceInPence","enrichAccountUsingNextAccount","balanceInPenceByAccount","getBalanceInPenceByAccount","Object","keys","forEach","accountBalance","acc","toLowerCase","includes","balanceMatch","match","balanceAmount","parseInt","length","i","nextAccount","slice","filter","a","navigator","clipboard","writeText","copiedToClipboardText","toast","autoClose","error","balance","onClick","copyToClipboard","style","fontWeight","fontSize","type","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uPAKqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,iBAAkB,IAGpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,gDASnB,SAAaC,GACX,IAAMH,EAAmBI,KAAKC,oBAAoBF,EAAMG,OAAOC,OAC/DC,QAAQC,IAAIT,GACZI,KAAKJ,iBAAmBI,KAAKM,SAAS,CACpCV,iBAAkBA,M,iCAItB,SAAoBW,GAAO,IAAD,OAElBC,EADQD,EAAKE,MAAM,MAEtBC,KAAI,SAAAC,GAAI,MAAK,CACVC,QAAS,EAAKC,WAAWF,GACzBG,eAAgB,EAAKC,kBAAkBJ,OAG7CX,KAAKgB,8BAA8BR,GAEnC,IAAMS,EAA0BjB,KAAKkB,2BAA2BV,GAE1DZ,EAAmB,GAKzB,OAJAuB,OAAOC,KAAKH,GAAyBI,SAAQ,SAAAT,GAC3ChB,EAAiBgB,GAAWK,EAAwBL,GAAW,OAG1DhB,I,wCAGT,SAA2BY,GACzB,IAAMS,EAA0B,GAUhC,OATAT,EAAgBa,SAAQ,SAAAC,GACgB,IAAlCA,EAAeR,iBACZG,EAAwBK,EAAeV,SAG1CK,EAAwBK,EAAeV,UAAYU,EAAeR,eAFlEG,EAAwBK,EAAeV,SAAWU,EAAeR,mBAMhEG,I,wBAGT,SAAWN,GACT,IAAIC,EAAU,KAOd,MANiB,CAAC,OAAQ,WACjBS,SAAQ,SAAAE,GACXZ,EAAKa,cAAcC,SAASF,KAC9BX,EAAUW,MAGPX,I,+BAQT,SAAkBD,GAChB,IACMe,EAAef,EAAKgB,MADL,sBAEjBC,EAAgB,EAEpB,OAAKF,GAGDA,EAAa,KACfE,GAAiBC,SAA2B,IAAlBH,EAAa,KAGrCA,EAAa,KACgB,IAA3BA,EAAa,GAAGI,OAClBF,GAAiBC,SAA2B,GAAlBH,EAAa,IACH,IAA3BA,EAAa,GAAGI,SACzBF,GAAiBC,SAASH,EAAa,MAIpCE,GAfmBA,I,2CAsB5B,SAA8BpB,GAC5B,IAAK,IAAIuB,EAAI,EAAGA,EAAIvB,EAAgBsB,OAAQC,IAAK,CAC/C,IAAMT,EAAiBd,EAAgBuB,GACvC,IAAKT,EAAeV,QAAS,CAC3B,IACMoB,EADoBxB,EAAgByB,MAAMF,EAAI,GAEjDG,QAAO,SAAAZ,GAAc,OAAIA,EAAeV,WACxCF,KAAI,SAAAY,GAAc,OAAIA,EAAeV,WAAS,GACjDU,EAAeV,QAAUoB,GAAe,c,oEAK9C,WAAsBzB,GAAtB,eAAA4B,EAAA,+EAEUC,UAAUC,UAAUC,UAAU/B,GAFxC,OAGUgC,EAAwB,sBAC9BnC,QAAQC,IAAIkC,GACZC,YAAMD,EAAuB,CAAEE,UAAW,MAL9C,gDAOIrC,QAAQsC,MAAM,mBAAd,MAPJ,yD,2EAWA,WAAU,IAAD,OACD9C,EAAmBuB,OAAOC,KAAKpB,KAAKL,MAAMC,kBAAkBc,KAChE,SAAAE,GACE,IAAM+B,EAAU,EAAKhD,MAAMC,iBAAiBgB,GAC5C,OACE,gCACE,iCACE,yCADF,IACmBA,EAAS,OAE5B,iCACE,yCADF,IACmB+B,KAEnB,wBAAQC,QAAS,kBAAM,EAAKC,gBAAgBF,IAA5C,8CAPQ/B,MAchB,OACE,gCACE,qBAAKkC,MAAO,CAAEC,WAAY,OAAQC,SAAU,YAA5C,4CAGA,gJAIA,0BACEC,KAAK,OACL9C,MAAOH,KAAKL,MAAMQ,MAClB+C,SAAUlD,KAAKH,eAEhBD,EACD,cAAC,IAAD,W,GAzJyBuD,IAAMC,WCAvCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7711146e.chunk.js","sourcesContent":["import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './style.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balanceByAccount: {}\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const balanceByAccount = this.getBalanceByAccount(event.target.value);\n    console.log(balanceByAccount);\n    this.balanceByAccount = this.setState({\n      balanceByAccount: balanceByAccount\n    });\n  }\n\n  getBalanceByAccount(text) {\n    const lines = text.split('\\n');\n    const accountBalances = lines\n      .map(line => ({\n          account: this.getAccount(line),\n          balanceInPence: this.getBalanceInPence(line)\n      }));\n\n    this.enrichAccountUsingNextAccount(accountBalances);\n\n    const balanceInPenceByAccount = this.getBalanceInPenceByAccount(accountBalances);\n\n    const balanceByAccount = {};\n    Object.keys(balanceInPenceByAccount).forEach(account => {\n      balanceByAccount[account] = balanceInPenceByAccount[account] / 100;\n    });\n\n    return balanceByAccount;\n  }\n\n  getBalanceInPenceByAccount(accountBalances) {\n    const balanceInPenceByAccount = {};\n    accountBalances.forEach(accountBalance => {\n      if (accountBalance.balanceInPence !== 0) {\n        if (!balanceInPenceByAccount[accountBalance.account]) {\n          balanceInPenceByAccount[accountBalance.account] = accountBalance.balanceInPence;\n        } else {\n          balanceInPenceByAccount[accountBalance.account] += accountBalance.balanceInPence;\n        }\n      }\n    });\n    return balanceInPenceByAccount;\n  }\n\n  getAccount(line) {\n    let account = null;\n    const accounts = ['amex', 'revolut'];\n    accounts.forEach(acc => {\n      if (line.toLowerCase().includes(acc)) {\n        account = acc;\n      }\n    });\n    return account;\n  }\n\n  /**\n   * Parse a line containing a sterling monetary amount and return the number of pence \n   * as an int. \n   * E.g. \"¬£102.2 to revolut\" => 10220\n   */\n  getBalanceInPence(line) {\n    const balanceRegex = /¬£(\\d+)\\.?(\\d+)?/;\n    const balanceMatch = line.match(balanceRegex);\n    let balanceAmount = 0;\n\n    if (!balanceMatch) return balanceAmount;\n\n    // Handle pounds\n    if (balanceMatch[1]) {\n      balanceAmount += parseInt(balanceMatch[1] * 100);\n    }\n    // Handle pence\n    if (balanceMatch[2]) {\n      if (balanceMatch[2].length === 1) {\n        balanceAmount += parseInt(balanceMatch[2] * 10);\n      } else if (balanceMatch[2].length === 2) {\n        balanceAmount += parseInt(balanceMatch[2]);\n      }\n    }\n\n    return balanceAmount;\n  }\n\n  /**\n   * If we don't have an account we populate it using the next\n   * available one or \"unknown\"\n   */\n  enrichAccountUsingNextAccount(accountBalances) {\n    for (let i = 0; i < accountBalances.length; i++) {\n      const accountBalance = accountBalances[i];\n      if (!accountBalance.account) {\n        const remainingAccounts = accountBalances.slice(i + 1)\n        const nextAccount = remainingAccounts\n          .filter(accountBalance => accountBalance.account)\n          .map(accountBalance => accountBalance.account)[0];\n        accountBalance.account = nextAccount || \"unknown\";\n      }\n    }\n  }\n\n  async copyToClipboard(text) {\n    try {\n      await navigator.clipboard.writeText(text);\n      const copiedToClipboardText = \"Copied to clipboard\";\n      console.log(copiedToClipboardText);\n      toast(copiedToClipboardText, { autoClose: 2000 })\n    } catch (err) {\n      console.error('Failed to copy: ', err);\n    }\n  }\n\n  render() {\n    const balanceByAccount = Object.keys(this.state.balanceByAccount).map(\n      account => {\n        const balance = this.state.balanceByAccount[account];\n        return (\n          <div key={account}>\n            <span>\n              <b>Account:</b> {account}{' '}\n            </span>\n            <span>\n              <b>Balance:</b> {balance}\n            </span>\n            <button onClick={() => this.copyToClipboard(balance)}>\n              üìã Copy to clipboard\n            </button>\n          </div>\n        );\n      }\n    );\n    return (\n      <div>\n        <div style={{ fontWeight: 'bold', fontSize: 'xx-large' }}>\n          ‚öñÔ∏è Balance Extractor\n        </div>\n        <div>\n          Copy and paste messages from WhatsApp into the box below. Account\n          balances will be extracted and totalled up.\n        </div>\n        <textarea\n          type=\"text\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n        {balanceByAccount}\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}