{"version":3,"sources":["App.js","index.js"],"names":["App","props","state","balanceByAccount","handleChange","bind","event","this","getBalanceByAccount","target","value","console","log","setState","text","lines","split","balancesByAccount","forEach","line","account","getAccount","balanceInPence","getBalanceInPence","Object","keys","acc","toLowerCase","includes","balanceMatch","match","balanceAmount","parseInt","length","a","navigator","clipboard","writeText","copiedToClipboardText","toast","autoClose","error","map","balance","onClick","copyToClipboard","style","fontWeight","fontSize","type","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uPAKqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,iBAAkB,IAGpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,gDASnB,SAAaC,GACX,IAAMH,EAAmBI,KAAKC,oBAAoBF,EAAMG,OAAOC,OAC/DC,QAAQC,IAAIT,GACZI,KAAKJ,iBAAmBI,KAAKM,SAAS,CACpCV,iBAAkBA,M,iCAItB,SAAoBW,GAAO,IAAD,OAClBC,EAAQD,EAAKE,MAAM,MACnBC,EAAoB,GAmB1B,OAlBAF,EAAMG,SAAQ,SAAAC,GACZ,IAAMC,EAAU,EAAKC,WAAWF,GAC1BG,EAAiB,EAAKC,kBAAkBJ,GAEvB,IAAnBG,IACGL,EAAkBG,GAGrBH,EAAkBG,IAAYE,EAF9BL,EAAkBG,GAAWE,MAQnCE,OAAOC,KAAKR,GAAmBC,SAAQ,SAAAE,GACrCH,EAAkBG,IAAY,OAGzBH,I,wBAGT,SAAWE,GACT,IAAIC,EAAU,UAOd,MANiB,CAAC,OAAQ,WACjBF,SAAQ,SAAAQ,GACXP,EAAKQ,cAAcC,SAASF,KAC9BN,EAAUM,MAGPN,I,+BAGT,SAAkBD,GAChB,IACMU,EAAeV,EAAKW,MADL,sBAEjBC,EAAgB,EAEpB,OAAKF,GAGDA,EAAa,KACfE,GAAiBC,SAA2B,IAAlBH,EAAa,KAGrCA,EAAa,KACgB,IAA3BA,EAAa,GAAGI,OAClBF,GAAiBC,SAA2B,GAAlBH,EAAa,IACH,IAA3BA,EAAa,GAAGI,SACzBF,GAAiBC,SAASH,EAAa,MAIpCE,GAfmBA,I,oEAkB5B,WAAsBjB,GAAtB,eAAAoB,EAAA,+EAEUC,UAAUC,UAAUC,UAAUvB,GAFxC,OAGUwB,EAAwB,sBAC9B3B,QAAQC,IAAI0B,GACZC,YAAMD,EAAuB,CAAEE,UAAW,MAL9C,gDAOI7B,QAAQ8B,MAAM,mBAAd,MAPJ,yD,2EAWA,WAAU,IAAD,OACDtC,EAAmBqB,OAAOC,KAAKlB,KAAKL,MAAMC,kBAAkBuC,KAChE,SAAAtB,GACE,IAAMuB,EAAU,EAAKzC,MAAMC,iBAAiBiB,GAC5C,OACE,gCACE,iCACE,yCADF,IACmBA,EAAS,OAE5B,iCACE,yCADF,IACmBuB,KAEnB,wBAAQC,QAAS,kBAAM,EAAKC,gBAAgBF,IAA5C,8CAPQvB,MAchB,OACE,gCACE,qBAAK0B,MAAO,CAAEC,WAAY,OAAQC,SAAU,YAA5C,4CAGA,gJAIA,0BACEC,KAAK,OACLvC,MAAOH,KAAKL,MAAMQ,MAClBwC,SAAU3C,KAAKH,eAEhBD,EACD,cAAC,IAAD,W,GAzHyBgD,IAAMC,WCAvCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f386883d.chunk.js","sourcesContent":["import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './style.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balanceByAccount: {}\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const balanceByAccount = this.getBalanceByAccount(event.target.value);\n    console.log(balanceByAccount);\n    this.balanceByAccount = this.setState({\n      balanceByAccount: balanceByAccount\n    });\n  }\n\n  getBalanceByAccount(text) {\n    const lines = text.split('\\n');\n    const balancesByAccount = {};\n    lines.forEach(line => {\n      const account = this.getAccount(line);\n      const balanceInPence = this.getBalanceInPence(line);\n\n      if (balanceInPence !== 0) {\n        if (!balancesByAccount[account]) {\n          balancesByAccount[account] = balanceInPence;\n        } else {\n          balancesByAccount[account] += balanceInPence;\n        }\n      }\n    });\n\n    // Convert back to pounds\n    Object.keys(balancesByAccount).forEach(account => {\n      balancesByAccount[account] /= 100;\n    })\n\n    return balancesByAccount;\n  }\n\n  getAccount(line) {\n    let account = 'unknown';\n    const accounts = ['amex', 'revolut'];\n    accounts.forEach(acc => {\n      if (line.toLowerCase().includes(acc)) {\n        account = acc;\n      }\n    });\n    return account;\n  }\n\n  getBalanceInPence(line) {\n    const balanceRegex = /¬£(\\d+)\\.?(\\d+)?/;\n    const balanceMatch = line.match(balanceRegex);\n    let balanceAmount = 0;\n\n    if (!balanceMatch) return balanceAmount;\n\n    // Handle pounds\n    if (balanceMatch[1]) {\n      balanceAmount += parseInt(balanceMatch[1] * 100);\n    }\n    // Handle pence\n    if (balanceMatch[2]) {\n      if (balanceMatch[2].length === 1) {\n        balanceAmount += parseInt(balanceMatch[2] * 10);\n      } else if (balanceMatch[2].length === 2) {\n        balanceAmount += parseInt(balanceMatch[2]);\n      }\n    }\n\n    return balanceAmount;\n  }\n\n  async copyToClipboard(text) {\n    try {\n      await navigator.clipboard.writeText(text);\n      const copiedToClipboardText = \"Copied to clipboard\";\n      console.log(copiedToClipboardText);\n      toast(copiedToClipboardText, { autoClose: 2000 })\n    } catch (err) {\n      console.error('Failed to copy: ', err);\n    }\n  }\n\n  render() {\n    const balanceByAccount = Object.keys(this.state.balanceByAccount).map(\n      account => {\n        const balance = this.state.balanceByAccount[account];\n        return (\n          <div key={account}>\n            <span>\n              <b>Account:</b> {account}{' '}\n            </span>\n            <span>\n              <b>Balance:</b> {balance}\n            </span>\n            <button onClick={() => this.copyToClipboard(balance)}>\n              üìã Copy to clipboard\n            </button>\n          </div>\n        );\n      }\n    );\n    return (\n      <div>\n        <div style={{ fontWeight: 'bold', fontSize: 'xx-large' }}>\n          ‚öñÔ∏è Balance Extractor\n        </div>\n        <div>\n          Copy and paste messages from WhatsApp into the box below. Account\n          balances will be extracted and totalled up.\n        </div>\n        <textarea\n          type=\"text\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n        {balanceByAccount}\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}